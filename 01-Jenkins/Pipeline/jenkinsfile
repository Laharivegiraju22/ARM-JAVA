def Pipeline_Message
node {
 stage('Git-Checkout') {
  Pipeline_Message=env.STAGE_NAME
   git 'https://github.com/Laharivegiraju22/ramya.git'
  }
    
 def project_path="01-Jenkins/Code/petclinic"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
  Pipeline_Message=env.STAGE_NAME
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
 Pipeline_Message=env.STAGE_NAME
   sh label: '', script: 'mvn compile'
  }
  
   stage('Maven-Test') {
   Pipeline_Message=env.STAGE_NAME
   sh label: '', script: 'mvn test'
  }
 

   stage('Maven-Package') {
   Pipeline_Message=env.STAGE_NAME
   sh label: '', script: 'mvn package'
  }
  
   stage('Archive-Artifacts') {
   Pipeline_Message=env.STAGE_NAME
   archiveArtifacts 'target/*.war'
  }
  
   stage('Sonar Analysis'){
Pipeline_Message=env.STAGE_NAME
	withSonarQubeEnv('SonarQube'){
	sh 'mvn sonar:sonar'
	}
}

stage('Jfrog Artifacory Upload') {
Pipeline_Message=env.STAGE_NAME
	def server= Artifactory.server 'Artifactory'
	def uploadSpec= """{
	"files": [{
	"pattern": "/root/.jenkins/workspace/Ramya/01-Jenkins/Code/petclinic/target/*.war",
		"target": "petclinic"}]
	}"""
server.upload(uploadSpec)
}
stage('Deploy Approval') {
                input('Do you want to proceed and deploy in production server?')           
        }
   stage('Docker-Stage-Deployment') {
   Pipeline_Message=env.STAGE_NAME
   sh label: '', script: 'docker-compose up -d --build'
  }


  stage('Geting Ready For Ansible') {
  Pipeline_Message=env.STAGE_NAME
  sh label: 'Docker', script: 'cp -rf target/*.war ../../../04-Terraform/03-Ansible-Deploy/ansible/04-Tomcat/templates/'
  sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ../../../04-Terraform/03-Ansible-Deploy/ansible/04-Tomcat/templates/apps/index.html"
}  
   
 }

def project_terra="04-Terraform/03-Ansible-Deploy"
dir(project_terra) {

   stage('Prod Deployment on AWS'){
   Pipeline_Message=env.STAGE_NAME
   sh label: 'terraform', script: '/bin/terraform  init'
   sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
   }
}


post 
    {  
        success {
            mail bcc: '', body: 'project is successfully built', from: '', replyTo: '', subject: 'project successfully finished.', to: 'Sailahari.Vegiraju@mindtree.com'
        }
        failure {
            mail bcc: '', body: 'project failed', from: '', replyTo: '', subject: 'project failed', to: 'Sailahari.Vegiraju@mindtree.com'
        }
	}
}
